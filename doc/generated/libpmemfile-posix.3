.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "" "3" ""pmemfile-posix API version 0.1.0" "" "" ""
.hy
.\" Copyright 2016-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]libpmemfile\-posix\f[]\-\- user space persistent memory file system
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemfile\-posix.h>
cc\ \-std=gnu99\ ..\ \-lpmemfile\-posix\ \-lpmemobj
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]libpmemfile\-posix\f[] provides a file system for persistent memory
which runs in user\-space.
.PP
The library is intended for applications that want to create and manage
a file system on persistent memory without the kernel overhead.
The interfaces in this library are modeled after the corresponding POSIX
interfaces for file management.
Using interfaces modeled on POSIX allows for easier transition for
application developers.
.SH ERROR HANDLING
.SS Return Values
.PP
For functions returning \[aq]int\[aq]:
.IP
.nf
\f[C]
\ 0\ success
\-1\ failure
\f[]
.fi
.PP
Otherwise as defined by the function return type.
.SS Errors
.IP
.nf
\f[C]
Errno\ is\ set\ in\ all\ failure\ cases.
Exceptions\ to\ a\ standard\ Errno\ values\ are\ noted.
\f[]
.fi
.SH SUPPORTED INTERFACES
.SS Creating or a pmemfile pool
.IP
.nf
\f[C]
PMEMfilepool\ *pmemfile_mkfs(const\ char\ *pathname,\ size_t\ poolsize,\ mode_t\ mode);
PMEMfilepool\ *pmemfile_pool_open(const\ char\ *pathname);
\f[]
.fi
.PP
To create or open an existing pool use the functions above.
The PMEMfile * is used in later calls to identify the pool for which the
operation applies.
.SS Access Management
.IP
.nf
\f[C]
int\ pmemfile_access(PMEMfilepool\ *pfp,\ const\ char\ *path,\ mode_t\ mode);
int\ pmemfile_faccessat(PMEMfilepool\ *pfp,\ PMEMfile\ *dir,\ const\ char\ *pathname,
\ \ \ \ \ \ \ \ int\ mode,\ int\ flags);

int\ pmemfile_chdir(PMEMfilepool\ *,\ const\ char\ *path);
int\ pmemfile_fchdir(PMEMfilepool\ *,\ PMEMfile\ *dir);

int\ pmemfile_chmod(PMEMfilepool\ *pfp,\ const\ char\ *path,\ mode_t\ mode);
int\ pmemfile_fchmod(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ mode_t\ mode);
int\ pmemfile_fchmodat(PMEMfilepool\ *pfp,\ PMEMfile\ *dir,\ const\ char\ *pathname,
\ \ \ \ \ \ \ \ mode_t\ mode,\ int\ flags);

int\ pmemfile_chown(PMEMfilepool\ *pfp,\ const\ char\ *pathname,\ uid_t\ owner,
\ \ \ \ \ \ \ \ gid_t\ group);
int\ pmemfile_fchown(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ uid_t\ owner,\ gid_t\ group);
int\ pmemfile_lchown(PMEMfilepool\ *pfp,\ const\ char\ *pathname,\ uid_t\ owner,
\ \ \ \ \ \ \ \ gid_t\ group);
int\ pmemfile_fchownat(PMEMfilepool\ *pfp,\ PMEMfile\ *dir,\ const\ char\ *pathname,
\ \ \ \ \ \ \ \ uid_t\ owner,\ gid_t\ group,\ int\ flags);
\f[]
.fi
.SS File Creation and Deletion
.IP
.nf
\f[C]
PMEMfile\ *pmemfile_open(PMEMfilepool\ *pfp,\ const\ char\ *pathname,\ int\ flags,
\ \ \ \ \ \ \ \ ...);
PMEMfile\ *pmemfile_openat(PMEMfilepool\ *pfp,\ PMEMfile\ *dir,
\ \ \ \ \ \ \ \ const\ char\ *pathname,\ int\ flags,\ ...);
PMEMfile\ *pmemfile_creat(PMEMfilepool\ *pfp,\ const\ char\ *pathname,
\ \ \ \ \ \ \ \ mode_t\ mode);

void\ pmemfile_close(PMEMfilepool\ *pfp,\ PMEMfile\ *file);

int\ pmemfile_link(PMEMfilepool\ *pfp,\ const\ char\ *oldpath,
\ \ \ \ \ \ \ \ const\ char\ *newpath);
int\ pmemfile_linkat(PMEMfilepool\ *pfp,\ PMEMfile\ *olddir,\ const\ char\ *oldpath,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMfile\ *newdir,\ const\ char\ *newpath,\ int\ flags);
int\ pmemfile_unlink(PMEMfilepool\ *pfp,\ const\ char\ *pathname);
int\ pmemfile_unlinkat(PMEMfilepool\ *pfp,\ PMEMfile\ *dir,\ const\ char\ *pathname,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ flags);
\f[]
.fi
.SS open/creat Flags Support
.IP
.nf
\f[C]
O_ASYNC
\ \ \ \ This\ flag\ is\ ignored.

O_CLOEXEC
\ \ \ \ This\ flag\ is\ always\ set.

O_DIRECT
\ \ \ \ This\ flag\ is\ ignored.

O_NOATIME
\ \ \ \ Is\ supported.

O_NONBLOCK\ or\ O_NDELAY
\ \ \ \ These\ flags\ are\ ignored.

O_NOCTTY
\ \ \ \ Not\ supported.

O_PATH
\ \ \ \ This\ flag\ will\ behave\ the\ same\ as\ is\ documented\ in\ the\ open()
\ \ \ \ man\-page.\ However,\ the\ use\ of\ the\ file\ descriptor\ returned\ as\ a
\ \ \ \ result\ \ of\ \ this\ flag\ cannot\ be\ used\ to\ pass\ to\ another\ process
\ \ \ \ via\ a\ UNIX\ domain\ socket.\ Sockets\ are\ not\ supported.

O_SYNC,\ O_DSYNC
\ \ \ \ These\ flags\ are\ ignored.\ Writes\ to\ persistent\ memory\ are\ always\ synchronous.
\f[]
.fi
.SS File Naming
.PP
libpmemfile\-posix does not support renaming files between pmemfile file
systems.
.IP
.nf
\f[C]
int\ pmemfile_rename(PMEMfilepool\ *,\ const\ char\ *old_path,\ const\ char\ *new_path);
int\ pmemfile_renameat(PMEMfilepool\ *,\ PMEMfile\ *old_at,\ const\ char\ *old_path,
\ \ \ \ \ \ \ \ PMEMfile\ *new_at,\ const\ char\ *new_path);
int\ pmemfile_renameat2(PMEMfilepool\ *,\ PMEMfile\ *old_at,\ const\ char\ *old_path,
\ \ \ \ \ \ \ \ PMEMfile\ *new_at,\ const\ char\ *new_path,\ unsigned\ flags);
\f[]
.fi
.SS File I/O
.IP
.nf
\f[C]
ssize_t\ pmemfile_read(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ void\ *buf,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ size_t\ count);
ssize_t\ pmemfile_pread(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ void\ *buf,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ size_t\ count,\ off_t\ offset);
ssize_t\ pmemfile_readv(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ const\ struct\ iovec\ *iov,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ iovcnt);
ssize_t\ pmemfile_preadv(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ const\ struct\ iovec\ *iov,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ iovcnt,\ off_t\ offset);

ssize_t\ pmemfile_write(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ const\ void\ *buf,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ size_t\ count);
ssize_t\ pmemfile_pwrite(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ const\ void\ *buf,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ size_t\ count,\ off_t\ offset);
ssize_t\ pmemfile_writev(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ const\ struct\ iovec\ *iov,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ iovcnt);
ssize_t\ pmemfile_pwritev(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ const\ struct\ iovec\ *iov,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ iovcnt,\ off_t\ offset);
\f[]
.fi
.SS Offset Management
.IP
.nf
\f[C]
off_t\ pmemfile_lseek(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ off_t\ offset,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ whence);

#ifdef\ __off64_t_defined
off64_t\ pmemfile_lseek64(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ off64_t\ offset,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ whence);
#endif

int\ pmemfile_truncate(PMEMfilepool\ *pfp,\ const\ char\ *path,\ off_t\ length);
int\ pmemfile_ftruncate(PMEMfilepool\ *pfp,\ PMEMfile\ *file,\ off_t\ length);
\f[]
.fi
.SS File Status
.IP
.nf
\f[C]
int\ pmemfile_stat(PMEMfilepool\ *,\ const\ char\ *path,\ struct\ stat\ *buf);
int\ pmemfile_lstat(PMEMfilepool\ *,\ const\ char\ *path,\ struct\ stat\ *buf);
int\ pmemfile_fstat(PMEMfilepool\ *,\ PMEMfile\ *file,\ struct\ stat\ *buf);
int\ pmemfile_fstatat(PMEMfilepool\ *,\ PMEMfile\ *dir,\ const\ char\ *path,
\ \ \ \ \ \ \ \ struct\ stat\ *buf,\ int\ flags);
\f[]
.fi
.SS Directory Management
.IP
.nf
\f[C]
int\ pmemfile_mkdir(PMEMfilepool\ *,\ const\ char\ *path,\ mode_t\ mode);
int\ pmemfile_mkdirat(PMEMfilepool\ *,\ PMEMfile\ *dir,\ const\ char\ *path,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mode_t\ mode);
int\ pmemfile_rmdir(PMEMfilepool\ *,\ const\ char\ *path);

int\ pmemfile_getdents(PMEMfilepool\ *,\ PMEMfile\ *file,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ struct\ linux_dirent\ *dirp,\ unsigned\ count);
int\ pmemfile_getdents64(PMEMfilepool\ *,\ PMEMfile\ *file,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ struct\ linux_dirent64\ *dirp,\ unsigned\ count);

char\ *pmemfile_getcwd(PMEMfilepool\ *,\ char\ *buf,\ size_t\ size);
\f[]
.fi
.SS File Descriptor Management
.IP
.nf
\f[C]
int\ pmemfile_fcntl(PMEMfilepool\ *,\ PMEMfile\ *file,\ int\ cmd,\ ...);
\f[]
.fi
.PP
\f[B]File Descriptor Flags\f[]
.IP
.nf
\f[C]
F_SETFD
\ \ \ \ O_CLOEXEC
\ \ \ \ Is\ supported.
\f[]
.fi
.PP
\f[B]File Status Flags\f[]
.IP
.nf
\f[C]
F_SETFL\ FLAGS
\ \ \ \ O_ASYNC
\ \ \ \ \ \ \ \ This\ flag\ is\ ignored.

\ \ \ \ O_DIRECT
\ \ \ \ \ \ \ \ Is\ ignored.

\ \ \ \ O_NONBLOCK
\ \ \ \ \ \ \ \ Is\ ignored.

\ \ \ \ O_APPEND
\ \ \ \ \ \ \ \ Is\ supported.
\f[]
.fi
.PP
\f[B]Locking Flags\f[]
.IP
.nf
\f[C]
F_GETLK
\ \ \ \ Is\ supported.

F_SETLK,\ F_SETLKW
\ \ \ \ Not\ supported.

MANDATORY\ LOCKS
\ \ \ \ Not\ supported.
\f[]
.fi
.PP
\f[B]Signal Flags\f[]
.IP
.nf
\f[C]
F_SETOWN,\ F_GETOWN_EX,\ F_SETOWN_EX
\ \ \ \ Not\ supported.

F_GETSIG,\ F_SETSIG
\ \ \ \ Not\ supported.
\f[]
.fi
.PP
\f[B]Lease Flags\f[]
.IP
.nf
\f[C]
F_SETLEASE,\ F_GETLEASE
\ \ \ \ Not\ supported.
\f[]
.fi
.PP
\f[B]Notification Flags\f[]
.IP
.nf
\f[C]
F_NOTIFY
\ \ \ \ Not\ supported.
\f[]
.fi
.PP
In all cases of unsupported flags Errno will be set to \f[I]EINVAL\f[].
Otherwise set as defined in the fcntl(2) manpage.
.SS Symbolic Link Management
.IP
.nf
\f[C]
ssize_t\ pmemfile_readlink(PMEMfilepool\ *pfp,\ const\ char\ *path,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ char\ *buf,\ size_t\ buf_len);
ssize_t\ pmemfile_readlinkat(PMEMfilepool\ *pfp,\ PMEMfile\ *dir,\ const\ char\ *pathname,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ char\ *buf,\ size_t\ bufsiz);
int\ pmemfile_symlink(PMEMfilepool\ *pfp,\ const\ char\ *path1,\ const\ char\ *path2);
int\ pmemfile_symlinkat(PMEMfilepool\ *pfp,\ const\ char\ *path1,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMfile\ *at,\ const\ char\ *path2);
\f[]
.fi
.SS Timestamp Management
.IP
.nf
\f[C]
int\ pmemfile_utime(PMEMfilepool\ *pfp,\ const\ char\ *filename,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ struct\ utimbuf\ *times);
int\ pmemfile_utimes(PMEMfilepool\ *pfp,\ const\ char\ *filename,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ struct\ timeval\ times[2]);
int\ pmemfile_futimes(PMEMfilepool\ *pfp,\ PMEMfile\ *file,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ struct\ timeval\ tv[2]);
int\ pmemfile_lutimes(PMEMfilepool\ *pfp,\ const\ char\ *filename,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ struct\ timeval\ tv[2]);
int\ pmemfile_utimensat(PMEMfilepool\ *pfp,\ PMEMfile\ *dir,\ const\ char\ *pathname,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ struct\ timespec\ times[2],\ int\ flags);
int\ pmemfile_futimens(PMEMfilepool\ *pfp,\ PMEMfile\ *file,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ const\ struct\ timespec\ times[2]);
\f[]
.fi
